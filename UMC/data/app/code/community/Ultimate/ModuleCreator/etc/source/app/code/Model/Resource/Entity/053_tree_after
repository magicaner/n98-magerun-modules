        return parent::_afterSave($object);
    }

    /**
     * Update path field
     *
     * @access protected
     * @param {{Namespace}}_{{Module}}_Model_{{Entity}} $object
     * @return {{Namespace}}_{{Module}}_Model_Resource_{{Entity}}
     * {{qwertyuiop}}
     */
    protected function _savePath($object)
    {
        if ($object->getId()) {
            $this->_getWriteAdapter()->update(
                $this->getMainTable(),
                array('path' => $object->getPath()),
                array('entity_id = ?' => $object->getId())
            );
        }
        return $this;
    }

    /**
     * Get maximum position of child {{entitiesLabel}} by specific tree path
     *
     * @access protected
     * @param string $path
     * @return int
     * {{qwertyuiop}}
     */
    protected function _getMaxPosition($path)
    {
        $adapter = $this->getReadConnection();
        $positionField = $adapter->quoteIdentifier('position');
        $level   = count(explode('/', $path));
        $bind = array(
            'c_level' => $level,
            'c_path'  => $path . '/%'
        );
        $select  = $adapter->select()
            ->from($this->getMainTable(), 'MAX(' . $positionField . ')')
            ->where($adapter->quoteIdentifier('path') . ' LIKE :c_path')
            ->where($adapter->quoteIdentifier('level') . ' = :c_level');

        $position = $adapter->fetchOne($select, $bind);
        if (!$position) {
            $position = 0;
        }
        return $position;
    }

    /**
     * Get children {{entitiesLabel}} count
     *
     * @access public
     * @param int ${{entity}}Id
     * @return int
     * {{qwertyuiop}}
     */
    public function getChildrenCount(${{entity}}Id)
    {
        $select = $this->_getReadAdapter()->select()
            ->from($this->getMainTable(), 'children_count')
            ->where('entity_id = :entity_id');
        $bind = array('entity_id' => ${{entity}}Id);
        return $this->_getReadAdapter()->fetchOne($select, $bind);
    }

    /**
     * Check if {{entityLabel}} id exist
     *
     * @access public
     * @param int $entityId
     * @return bool
     * {{qwertyuiop}}
     */
    public function checkId($entityId)
    {
        $select = $this->_getReadAdapter()->select()
            ->from($this->getMainTable(), 'entity_id')
            ->where('entity_id = :entity_id');
        $bind =  array('entity_id' => $entityId);
        return $this->_getReadAdapter()->fetchOne($select, $bind);
    }

    /**
     * Check array of {{entitiesLabel}} identifiers
     *
     * @access public
     * @param array $ids
     * @return array
     * {{qwertyuiop}}
     */
    public function verifyIds(array $ids)
    {
        if (empty($ids)) {
            return array();
        }
        $select = $this->_getReadAdapter()->select()
            ->from($this->getMainTable(), 'entity_id')
            ->where('entity_id IN(?)', $ids);

        return $this->_getReadAdapter()->fetchCol($select);
    }

    /**
     * Get count of active/not active children {{entitiesLabel}}
     *
     * @param {{Namespace}}_{{Module}}_Model_{{Entity}} ${{entity}}
     * @param bool $isActiveFlag
     * @return int
     * {{qwertyuiop}}
     */
    public function getChildrenAmount(${{entity}}, $isActiveFlag = true)
    {
        $bind = array(
            'active_flag'  => $isActiveFlag,
            'c_path'   => ${{entity}}->getPath() . '/%'
        );
        $select = $this->_getReadAdapter()->select()
            ->from(array('m' => $this->getMainTable()), array('COUNT(m.entity_id)'))
            ->where('m.path LIKE :c_path')
            ->where('status' . ' = :active_flag');
        return $this->_getReadAdapter()->fetchOne($select, $bind);
    }

    /**
     * Return parent {{entitiesLabel}} of {{entityLabel}}
     *
     * @access public
     * @param {{Namespace}}_{{Module}}_Model_{{Entity}} ${{entity}}
     * @return array
     * {{qwertyuiop}}
     */
    public function getParent{{Entities}}(${{entity}})
    {
        $pathIds = array_reverse(explode('/', ${{entity}}->getPath()));
        ${{entities}} = Mage::getResourceModel('{{namespace}}_{{module}}/{{entity}}_collection')
            ->addFieldToFilter('entity_id', array('in' => $pathIds))
            ->load()
            ->getItems();
        return ${{entities}};
    }

    /**
     * Return child {{entitiesLabel}}
     *
     * @access public
     * @param {{Namespace}}_{{Module}}_Model_{{Entity}} ${{entity}}
     * @return {{Namespace}}_{{Module}}_Model_Resource_{{Entity}}_Collection
     * {{qwertyuiop}}
     */
    public function getChildren{{Entities}}(${{entity}})
    {
        $collection = ${{entity}}->getCollection();
        $collection
            ->addIdFilter(${{entity}}->getChild{{Entities}}())
            ->setOrder('position', Varien_Db_Select::SQL_ASC)
            ->load();
        return $collection;
    }
    /**
     * Return children ids of {{entityLabel}}
     *
     * @access public
     * @param {{Namespace}}_{{Module}}_Model_{{Entity}} ${{entity}}
     * @param boolean $recursive
     * @return array
     * {{qwertyuiop}}
     */
    public function getChildren(${{entity}}, $recursive = true)
    {
        $bind = array(
            'c_path'   => ${{entity}}->getPath() . '/%'
        );
        $select = $this->_getReadAdapter()->select()
            ->from(array('m' => $this->getMainTable()), 'entity_id')
            ->where('status = ?', 1)
            ->where($this->_getReadAdapter()->quoteIdentifier('path') . ' LIKE :c_path');
        if (!$recursive) {
            $select->where($this->_getReadAdapter()->quoteIdentifier('level') . ' <= :c_level');
            $bind['c_level'] = ${{entity}}->getLevel() + 1;
        }
        return $this->_getReadAdapter()->fetchCol($select, $bind);
    }
